on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest

    name: ${{ matrix.config.dirname }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - { url:      "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz",
            tarname:  "arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz",
            dirname:  "arm-gnu-toolchain-13.2.Rel1-x86_64-arm-none-eabi",
            prefix:   "arm-none-eabi-",
            circle-machine: "1",
            qemu-machine: "raspi0" }
        - { url:      "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-elf.tar.xz",
            tarname:  "arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-elf.tar.xz",
            dirname:  "arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-elf",
            prefix:   "aarch64-none-elf-",
            circle-machine: "3",
            qemu-machine: "raspi3b" }
        - { url:      "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi.tar.xz",
            tarname:  "arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi.tar.xz",
            dirname:  "arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi",
            prefix:   "arm-none-eabi-",
            circle-machine: "1",
            qemu-machine: "raspi0" }
        - { url:      "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf.tar.xz",
            tarname:  "arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf.tar.xz",
            dirname:  "arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-elf",
            prefix:   "aarch64-none-elf-",
            circle-machine: "3",
            qemu-machine: "raspi3b" }

    steps:
    - name: Select 32-bit QEMU
      if: matrix.config.circle-machine == '1'
      run: |
        echo "CFG_QEMU_BIN=$HOME/local/qemu-9.1.1/bin/qemu-system-arm" >> $GITHUB_ENV
        echo "CFG_QEMU_OPT=-bios" >> $GITHUB_ENV
        echo "CFG_QEMU_IMG=kernel.img" >> $GITHUB_ENV

    - name: Select 64-bit QEMU
      if: matrix.config.circle-machine == '3'
      run: |
        echo "CFG_QEMU_BIN=$HOME/local/qemu-9.1.1/bin/qemu-system-aarch64" >> $GITHUB_ENV
        echo "CFG_QEMU_OPT=-kernel" >> $GITHUB_ENV
        echo "CFG_QEMU_IMG=kernel8.img" >> $GITHUB_ENV

    - name: Checkout circle-stdlib
      uses: actions/checkout@v4
      with:
        repository: smuehlst/circle-stdlib
        path: circle-stdlib

    - name: Cache QEMU
      id: qemu-9_1_1-cache-id
      uses: actions/cache@v3
      with:
        path: ~/local/qemu-9.1.1
        key: ${{ runner.os }}-qemu-9_1_1

    - name: Clone QEMU Repository
      if: steps.qemu-9_1_1-cache-id.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: smuehlst/qemu
        ref: circle-hcd-dwc2-9.1.1
        path: qemu

    - name: Build QEMU   
      if: steps.qemu-9_1_1-cache-id.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install ninja-build libglib2.0-dev
        mkdir -p $GITHUB_WORKSPACE/qemu-build
        cd $GITHUB_WORKSPACE/qemu-build
        ../qemu/configure --without-default-features --prefix=$HOME/local/qemu-9.1.1 --target-list=arm-softmmu,aarch64-softmmu
        make -j
        make install

    - name: Cache Compiler ${{ matrix.config.dirname }}
      id: compiler-cache-id
      uses: actions/cache@v3
      with:
        path: ~/local/${{ matrix.config.dirname }}
        key: ${{ runner.os }}-compiler-${{ matrix.config.dirname }}

    - name: Install Compiler ${{ matrix.config.dirname }}
      if: steps.compiler-cache-id.outputs.cache-hit != 'true'
      run: |
        cd
        wget -nv -O ${{ matrix.config.tarname }} ${{ matrix.config.url }}
        tar -x -f ${{ matrix.config.tarname }} -C ~/local
 
    - name: Set Compiler Path ${{ matrix.config.dirname }}
      run: echo "$HOME/local/${{ matrix.config.dirname }}/bin" >> $GITHUB_PATH

    - name: Update submodules
      run: |
        cd $GITHUB_WORKSPACE/circle-stdlib
        git submodule update --init --recursive
                
    - name: Configure circle-stdlib with QEMU support
      run:  |
        cd $GITHUB_WORKSPACE/circle-stdlib
        ./configure -p ${{ matrix.config.prefix }} -r ${{ matrix.config.circle-machine }} --qemu
        
    - name: Build libraries
      run: make -j -C $GITHUB_WORKSPACE/circle-stdlib

    - name: Build samples
      run: make -C $GITHUB_WORKSPACE/circle-stdlib build-samples
      
    - name: Run smoke test with QEMU
      run: |
        cd $GITHUB_WORKSPACE/circle-stdlib/samples/05-smoketest
        # Extract blank SD card image
        rm -f sdcard.img
        unzip sdcard.img.zip
        # Guard against endless loop in QEMU run (120 CPU secs)
        ulimit -t 120
        $CFG_QEMU_BIN -M ${{ matrix.config.qemu-machine }} $CFG_QEMU_OPT $CFG_QEMU_IMG -display none -nographic -semihosting -sd sdcard.img
